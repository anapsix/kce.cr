require "yaml"
require "./exceptions"

module KCE
  # Implements YAML parser for `KUBECONFIG`
  # Structs are generated by [quicktype](https://github.com/quicktype/quicktype) <3
  #
  # Usage example:
  #
  # ```
  # require "kce/configreader"
  #
  # # if path is omitted, KUBECONFIG env variable will be used
  # # if env variable is unset, it defaults to "~/.kube/config"
  # reader = KCE::ConfigReader.new
  # config = reader.config
  # pp! config
  #
  # # reading from alternative path
  # reader = KCE::ConfigReader.new("/path/to/kubeconfig")
  #
  # # getting config via class method
  # KCE::ConfigReader.config("/path/to/kubeconfig")
  # ```
  struct ConfigReader
    # Top-level `KUBECONFIG` object
    class Kubeconfig
      include YAML::Serializable
      include YAML::Serializable::Unmapped

      class ClusterElement
        include YAML::Serializable
        include YAML::Serializable::Unmapped

        property cluster : ClusterCluster
        property name : String
      end

      class ClusterCluster
        include YAML::Serializable
        include YAML::Serializable::Unmapped

        @[YAML::Field(key: "certificate-authority-data")]
        property certificate_authority_data : String?

        @[YAML::Field(key: "insecure-skip-tls-verify")]
        property insecure_skip_tls_verify : Bool = false

        property server : String
      end

      class ContextElement
        include YAML::Serializable
        include YAML::Serializable::Unmapped

        property context : ContextContext
        property name : String
      end

      class ContextContext
        include YAML::Serializable
        include YAML::Serializable::Unmapped

        property cluster : String
        property user : String
        property namespace : String?
      end

      class Preferences
        include YAML::Serializable
        include YAML::Serializable::Unmapped
      end

      class UserElement
        include YAML::Serializable
        include YAML::Serializable::Unmapped

        property name : String
        property user : UserUser
      end

      class UserUser
        include YAML::Serializable
        include YAML::Serializable::Unmapped

        @[YAML::Field(key: "auth-provider")]
        property auth_provider : AuthProvider?

        property password : String?
        property username : String?

        @[YAML::Field(key: "client-certificate")]
        property client_certificate : String?

        @[YAML::Field(key: "client-certificate-data")]
        property client_certificate_data : String?

        @[YAML::Field(key: "client-key")]
        property client_key : String?

        @[YAML::Field(key: "client-key-data")]
        property client_key_data : String?
      end

      class AuthProvider
        include YAML::Serializable
        include YAML::Serializable::Unmapped

        property config : Config
        property name : String
      end

      class Config
        include YAML::Serializable
        include YAML::Serializable::Unmapped

        @[YAML::Field(key: "client-id")]
        property client_id : String

        @[YAML::Field(key: "client-secret")]
        property client_secret : String

        @[YAML::Field(key: "id-token")]
        property id_token : String

        @[YAML::Field(key: "idp-issuer-url")]
        property idp_issuer_url : String

        @[YAML::Field(key: "refresh-token")]
        property refresh_token : String
      end

      @[YAML::Field(key: "apiVersion")]
      property api_version : String

      property clusters : Array(ClusterElement)
      property contexts : Array(ContextElement)

      @[YAML::Field(key: "current-context")]
      property current_context : String

      property kind : String
      property preferences : Preferences?
      property users : Array(UserElement)
    end

    # Target `KUBECONFIG` used for parsing
    getter file : String

    # Parsed `KUBECONFIG` object
    getter config : Kubeconfig

    def initialize(file : String | Nil = nil)
      file ||= ENV.fetch("KUBECONFIG", "#{ENV["HOME"]}/.kube/config")
      @file = file
      if File.readable?(file)
        @config = Kubeconfig.from_yaml(File.read(@file))
        unless @config.@yaml_unmapped.empty?
          STDERR.puts "WARNING: unmapped valued detected"
        end
      else
        raise KCE::Exceptions::NoFileAccessError.new("\"#{file}\" is not readable")
      end
    end

    # Returns config YAML parsed config object.
    #
    # When `file` is not passed, uses value of `KUBECONFIG`.
    # If `KUBECONFIG` is unset, defaults to `$HOME/.kube/config`
    #
    # Raises `KCE::Exceptions::NoFileAccessError` if file is not accessible
    def self.config(file : String | Nil = nil)
      self.new(file).config
    end
  end
end
